#!/usr/bin/env bash
set -euo pipefail  # Better error handling and exiting on error

# Function to determine the default architecture
determine_default_architecture() {
    local default_arch="amd64"
    if [[ "$(uname -m)" = *"aarch"* ]] || [[ "$(uname -m)" = *"arm"* ]]; then
        default_arch="arm64"
    fi
    echo "$default_arch"
}

# get the path to this script
SCRIPTS_PATH=$(realpath "$(dirname "${BASH_SOURCE[0]}")")
PROJECT_PATH=$(realpath "$SCRIPTS_PATH/..")

default_arch=amd64
if [[ "$(uname -m)" = *"aarch"* ]] || [[ "$(uname -m)" = *"arm"* ]]; then
	default_arch=arm64
fi

# If you don't pass variable arch from outside, it will use the autodetected value
[ -z "$arch" ] && arch="$default_arch"

url="https://gitlab.fel.cvut.cz/api/v4/projects/robolab%2Fdeploy/releases/permalink/latest/downloads/robolab_noetic_${arch}.simg"

last_release="$(LANG=C wget --max-redirect=0 "$url" 2>&1 | grep --color=never 'Location:' | cut -d / -f7)"
local_release="$(cat "${PROJECT_PATH}/images/robolab_noetic.simg.version" 2>/dev/null || echo)"

if [ "$last_release" = "$local_release" ]; then
	echo "You already have the latest singularity image (version $last_release)."
	exit 0
fi

echo "Downloading Singularity image for ${arch} CPU architecture (it has ~ 2GiB)."
if wget "$url" -O "${PROJECT_PATH}/images/robolab_noetic.simg"; then
  echo "The image was downloaded to ${PROJECT_PATH}/images/robolab_noetic.simg ."
  echo "$last_release" > "${PROJECT_PATH}/images/robolab_noetic.simg.version"
else
 	echo "Download failed!"
fi