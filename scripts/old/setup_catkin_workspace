#!/usr/bin/env bash
set -euo pipefail  # Better error handling and exiting on error

# Function to print usage information
print_usage() {
    cat <<EOF
Setup Catkin workspace at specified directory.

Usage:
    setup_catkin_workspace [<options>] [<workspace>]

Options:
- -e|--extend:       Workspace to extend.
- -r|--ros:          ROS distribution (kinetic/melodic/noetic).
- -d|--rosdep:       Install dependencies via rosdep? [y/n]
- -i|--rosinstall:   Workspace rosinstall files.
- -p|--install:      Path to install space. Don't install if not provided.
EOF
}

# Function to handle errors and exit
handle_error() {
    echo "ERROR: $1" >&2
    exit 1
}

# Function to configure main repositories from provided rosinstall files
configure_repositories() {
    mkdir -p "${workspace}/src"
    cd "${workspace}/src" || handle_error "Failed to navigate to ${workspace}/src"
    wstool init

    # Merge provided rosinstall files
    for file in "${rosinstall[@]}"; do
        [ -e "$file" ] && wstool merge -k "$file"
    done
    wstool up -j 8
}

# Function to install ROS dependencies using rosdep
install_ros_dependencies() {
    if [ "${rosdep}" = "y" ]; then
        rosdep update
        rosdep install --from-paths "${workspace}/src" --ignore-src --rosdistro "${ros}" -r -y
    fi
}

# Function to initialize, configure, and build catkin workspace
initialize_catkin_workspace() {
    cd "${workspace}" || handle_error "Failed to navigate to ${workspace}"
    catkin init
    catkin config --extend "${extend}"
    catkin config --cmake-args -DCMAKE_BUILD_TYPE=Release
    [ -n "${install}" ] && catkin config -i "${install}" --install
    catkin build -c || handle_error "Catkin build incomplete"
}

# Main script logic
main() {
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        key="$1"
        case $key in
            -e|--extend)
            extend="$2"
            shift # past argument
            shift # past value
            ;;
            -r|--ros)
            ros="$2"
            shift # past argument
            shift # past value
            ;;
            -d|--rosdep)
            rosdep="$2"
            shift # past argument
            shift # past value
            ;;
            -i|--rosinstall)
            rosinstall+=("$2")
            shift # past argument
            shift # past value
            ;;
            -p|--install)
            install="$2"
            shift # past argument
            shift # past value
            ;;
            -h|--help)
            print_usage
            ;;
            *)
            if [[ -z "${workspace:-}" ]]; then
                workspace="$1"
            else
                print_usage
                handle_error "Unknown option: $1"
            fi
            shift # past argument or value
            ;;
        esac
    done

    workspace="${workspace:$(pwd)}"
    extend="${extend:-/opt/ros/${ros}}"

    if [ -z "${ros}" ] && [ -d /opt/ros/noetic ]; then
        ros=noetic
    elif [ -z "${ros}" ] && [ -d /opt/ros/melodic ]; then
        ros=melodic
    elif [ -z "${ros}" ] && [ -d /opt/ros/kinetic ]; then
        ros=kinetic
    else
        handle_error "ROS distribution not found"
    fi

    echo
    echo "=================================================="
    echo "Setting up Catkin workspace at: ${workspace}"
    echo "=================================================="

    echo "ROS distribution: ${ros}"
    echo "Extend workspace: ${extend}"
    echo "Install space: ${install}"
    echo "Install dependencies: ${rosdep}"
    echo "ROS install files: ${rosinstall[*]}"
    echo "=================================================="
    echo

    # Configure repositories, install dependencies, and initialize catkin workspace
    configure_repositories
    install_ros_dependencies
    initialize_catkin_workspace
}

# Execute main function with arguments passed to the script
main "$@"
